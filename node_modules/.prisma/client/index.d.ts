
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Agent
 * 
 */
export type Agent = $Result.DefaultSelection<Prisma.$AgentPayload>
/**
 * Model Notification
 * 
 */
export type Notification = $Result.DefaultSelection<Prisma.$NotificationPayload>
/**
 * Model Notifvu
 * 
 */
export type Notifvu = $Result.DefaultSelection<Prisma.$NotifvuPayload>
/**
 * Model Banque
 * 
 */
export type Banque = $Result.DefaultSelection<Prisma.$BanquePayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Agents
 * const agents = await prisma.agent.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Agents
   * const agents = await prisma.agent.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.agent`: Exposes CRUD operations for the **Agent** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Agents
    * const agents = await prisma.agent.findMany()
    * ```
    */
  get agent(): Prisma.AgentDelegate<ExtArgs>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.NotificationDelegate<ExtArgs>;

  /**
   * `prisma.notifvu`: Exposes CRUD operations for the **Notifvu** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifvus
    * const notifvus = await prisma.notifvu.findMany()
    * ```
    */
  get notifvu(): Prisma.NotifvuDelegate<ExtArgs>;

  /**
   * `prisma.banque`: Exposes CRUD operations for the **Banque** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Banques
    * const banques = await prisma.banque.findMany()
    * ```
    */
  get banque(): Prisma.BanqueDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.0.0
   * Query Engine version: 5dbef10bdbfb579e07d35cc85fb1518d357cb99e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Agent: 'Agent',
    Notification: 'Notification',
    Notifvu: 'Notifvu',
    Banque: 'Banque'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "agent" | "notification" | "notifvu" | "banque"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Agent: {
        payload: Prisma.$AgentPayload<ExtArgs>
        fields: Prisma.AgentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AgentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AgentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentPayload>
          }
          findFirst: {
            args: Prisma.AgentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AgentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentPayload>
          }
          findMany: {
            args: Prisma.AgentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentPayload>[]
          }
          create: {
            args: Prisma.AgentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentPayload>
          }
          createMany: {
            args: Prisma.AgentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AgentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentPayload>[]
          }
          delete: {
            args: Prisma.AgentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentPayload>
          }
          update: {
            args: Prisma.AgentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentPayload>
          }
          deleteMany: {
            args: Prisma.AgentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AgentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AgentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentPayload>
          }
          aggregate: {
            args: Prisma.AgentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAgent>
          }
          groupBy: {
            args: Prisma.AgentGroupByArgs<ExtArgs>
            result: $Utils.Optional<AgentGroupByOutputType>[]
          }
          count: {
            args: Prisma.AgentCountArgs<ExtArgs>
            result: $Utils.Optional<AgentCountAggregateOutputType> | number
          }
        }
      }
      Notification: {
        payload: Prisma.$NotificationPayload<ExtArgs>
        fields: Prisma.NotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findFirst: {
            args: Prisma.NotificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findMany: {
            args: Prisma.NotificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          create: {
            args: Prisma.NotificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          createMany: {
            args: Prisma.NotificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NotificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          delete: {
            args: Prisma.NotificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          update: {
            args: Prisma.NotificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          deleteMany: {
            args: Prisma.NotificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.NotificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          aggregate: {
            args: Prisma.NotificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotification>
          }
          groupBy: {
            args: Prisma.NotificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationCountAggregateOutputType> | number
          }
        }
      }
      Notifvu: {
        payload: Prisma.$NotifvuPayload<ExtArgs>
        fields: Prisma.NotifvuFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotifvuFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotifvuPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotifvuFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotifvuPayload>
          }
          findFirst: {
            args: Prisma.NotifvuFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotifvuPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotifvuFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotifvuPayload>
          }
          findMany: {
            args: Prisma.NotifvuFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotifvuPayload>[]
          }
          create: {
            args: Prisma.NotifvuCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotifvuPayload>
          }
          createMany: {
            args: Prisma.NotifvuCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NotifvuCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotifvuPayload>[]
          }
          delete: {
            args: Prisma.NotifvuDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotifvuPayload>
          }
          update: {
            args: Prisma.NotifvuUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotifvuPayload>
          }
          deleteMany: {
            args: Prisma.NotifvuDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotifvuUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.NotifvuUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotifvuPayload>
          }
          aggregate: {
            args: Prisma.NotifvuAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotifvu>
          }
          groupBy: {
            args: Prisma.NotifvuGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotifvuGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotifvuCountArgs<ExtArgs>
            result: $Utils.Optional<NotifvuCountAggregateOutputType> | number
          }
        }
      }
      Banque: {
        payload: Prisma.$BanquePayload<ExtArgs>
        fields: Prisma.BanqueFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BanqueFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BanquePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BanqueFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BanquePayload>
          }
          findFirst: {
            args: Prisma.BanqueFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BanquePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BanqueFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BanquePayload>
          }
          findMany: {
            args: Prisma.BanqueFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BanquePayload>[]
          }
          create: {
            args: Prisma.BanqueCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BanquePayload>
          }
          createMany: {
            args: Prisma.BanqueCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BanqueCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BanquePayload>[]
          }
          delete: {
            args: Prisma.BanqueDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BanquePayload>
          }
          update: {
            args: Prisma.BanqueUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BanquePayload>
          }
          deleteMany: {
            args: Prisma.BanqueDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BanqueUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BanqueUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BanquePayload>
          }
          aggregate: {
            args: Prisma.BanqueAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBanque>
          }
          groupBy: {
            args: Prisma.BanqueGroupByArgs<ExtArgs>
            result: $Utils.Optional<BanqueGroupByOutputType>[]
          }
          count: {
            args: Prisma.BanqueCountArgs<ExtArgs>
            result: $Utils.Optional<BanqueCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type AgentCountOutputType
   */

  export type AgentCountOutputType = {
    notifvu: number
  }

  export type AgentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    notifvu?: boolean | AgentCountOutputTypeCountNotifvuArgs
  }

  // Custom InputTypes
  /**
   * AgentCountOutputType without action
   */
  export type AgentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentCountOutputType
     */
    select?: AgentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AgentCountOutputType without action
   */
  export type AgentCountOutputTypeCountNotifvuArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotifvuWhereInput
  }


  /**
   * Count Type NotificationCountOutputType
   */

  export type NotificationCountOutputType = {
    notifvu: number
  }

  export type NotificationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    notifvu?: boolean | NotificationCountOutputTypeCountNotifvuArgs
  }

  // Custom InputTypes
  /**
   * NotificationCountOutputType without action
   */
  export type NotificationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationCountOutputType
     */
    select?: NotificationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * NotificationCountOutputType without action
   */
  export type NotificationCountOutputTypeCountNotifvuArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotifvuWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Agent
   */

  export type AggregateAgent = {
    _count: AgentCountAggregateOutputType | null
    _avg: AgentAvgAggregateOutputType | null
    _sum: AgentSumAggregateOutputType | null
    _min: AgentMinAggregateOutputType | null
    _max: AgentMaxAggregateOutputType | null
  }

  export type AgentAvgAggregateOutputType = {
    id: number | null
    salaire: number | null
    solde: number | null
  }

  export type AgentSumAggregateOutputType = {
    id: number | null
    salaire: number | null
    solde: number | null
  }

  export type AgentMinAggregateOutputType = {
    id: number | null
    nom: string | null
    postNom: string | null
    prenom: string | null
    tel: string | null
    mdp: string | null
    matricule: string | null
    email: string | null
    salaire: number | null
    solde: number | null
    notificateur: boolean | null
  }

  export type AgentMaxAggregateOutputType = {
    id: number | null
    nom: string | null
    postNom: string | null
    prenom: string | null
    tel: string | null
    mdp: string | null
    matricule: string | null
    email: string | null
    salaire: number | null
    solde: number | null
    notificateur: boolean | null
  }

  export type AgentCountAggregateOutputType = {
    id: number
    nom: number
    postNom: number
    prenom: number
    tel: number
    mdp: number
    matricule: number
    email: number
    salaire: number
    solde: number
    notificateur: number
    _all: number
  }


  export type AgentAvgAggregateInputType = {
    id?: true
    salaire?: true
    solde?: true
  }

  export type AgentSumAggregateInputType = {
    id?: true
    salaire?: true
    solde?: true
  }

  export type AgentMinAggregateInputType = {
    id?: true
    nom?: true
    postNom?: true
    prenom?: true
    tel?: true
    mdp?: true
    matricule?: true
    email?: true
    salaire?: true
    solde?: true
    notificateur?: true
  }

  export type AgentMaxAggregateInputType = {
    id?: true
    nom?: true
    postNom?: true
    prenom?: true
    tel?: true
    mdp?: true
    matricule?: true
    email?: true
    salaire?: true
    solde?: true
    notificateur?: true
  }

  export type AgentCountAggregateInputType = {
    id?: true
    nom?: true
    postNom?: true
    prenom?: true
    tel?: true
    mdp?: true
    matricule?: true
    email?: true
    salaire?: true
    solde?: true
    notificateur?: true
    _all?: true
  }

  export type AgentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Agent to aggregate.
     */
    where?: AgentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Agents to fetch.
     */
    orderBy?: AgentOrderByWithRelationInput | AgentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AgentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Agents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Agents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Agents
    **/
    _count?: true | AgentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AgentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AgentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AgentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AgentMaxAggregateInputType
  }

  export type GetAgentAggregateType<T extends AgentAggregateArgs> = {
        [P in keyof T & keyof AggregateAgent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAgent[P]>
      : GetScalarType<T[P], AggregateAgent[P]>
  }




  export type AgentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AgentWhereInput
    orderBy?: AgentOrderByWithAggregationInput | AgentOrderByWithAggregationInput[]
    by: AgentScalarFieldEnum[] | AgentScalarFieldEnum
    having?: AgentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AgentCountAggregateInputType | true
    _avg?: AgentAvgAggregateInputType
    _sum?: AgentSumAggregateInputType
    _min?: AgentMinAggregateInputType
    _max?: AgentMaxAggregateInputType
  }

  export type AgentGroupByOutputType = {
    id: number
    nom: string
    postNom: string
    prenom: string
    tel: string
    mdp: string
    matricule: string
    email: string
    salaire: number
    solde: number
    notificateur: boolean
    _count: AgentCountAggregateOutputType | null
    _avg: AgentAvgAggregateOutputType | null
    _sum: AgentSumAggregateOutputType | null
    _min: AgentMinAggregateOutputType | null
    _max: AgentMaxAggregateOutputType | null
  }

  type GetAgentGroupByPayload<T extends AgentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AgentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AgentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AgentGroupByOutputType[P]>
            : GetScalarType<T[P], AgentGroupByOutputType[P]>
        }
      >
    >


  export type AgentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nom?: boolean
    postNom?: boolean
    prenom?: boolean
    tel?: boolean
    mdp?: boolean
    matricule?: boolean
    email?: boolean
    salaire?: boolean
    solde?: boolean
    notificateur?: boolean
    notifvu?: boolean | Agent$notifvuArgs<ExtArgs>
    _count?: boolean | AgentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["agent"]>

  export type AgentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nom?: boolean
    postNom?: boolean
    prenom?: boolean
    tel?: boolean
    mdp?: boolean
    matricule?: boolean
    email?: boolean
    salaire?: boolean
    solde?: boolean
    notificateur?: boolean
  }, ExtArgs["result"]["agent"]>

  export type AgentSelectScalar = {
    id?: boolean
    nom?: boolean
    postNom?: boolean
    prenom?: boolean
    tel?: boolean
    mdp?: boolean
    matricule?: boolean
    email?: boolean
    salaire?: boolean
    solde?: boolean
    notificateur?: boolean
  }

  export type AgentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    notifvu?: boolean | Agent$notifvuArgs<ExtArgs>
    _count?: boolean | AgentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AgentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $AgentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Agent"
    objects: {
      notifvu: Prisma.$NotifvuPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nom: string
      postNom: string
      prenom: string
      tel: string
      mdp: string
      matricule: string
      email: string
      salaire: number
      solde: number
      notificateur: boolean
    }, ExtArgs["result"]["agent"]>
    composites: {}
  }

  type AgentGetPayload<S extends boolean | null | undefined | AgentDefaultArgs> = $Result.GetResult<Prisma.$AgentPayload, S>

  type AgentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AgentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AgentCountAggregateInputType | true
    }

  export interface AgentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Agent'], meta: { name: 'Agent' } }
    /**
     * Find zero or one Agent that matches the filter.
     * @param {AgentFindUniqueArgs} args - Arguments to find a Agent
     * @example
     * // Get one Agent
     * const agent = await prisma.agent.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AgentFindUniqueArgs>(args: SelectSubset<T, AgentFindUniqueArgs<ExtArgs>>): Prisma__AgentClient<$Result.GetResult<Prisma.$AgentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Agent that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AgentFindUniqueOrThrowArgs} args - Arguments to find a Agent
     * @example
     * // Get one Agent
     * const agent = await prisma.agent.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AgentFindUniqueOrThrowArgs>(args: SelectSubset<T, AgentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AgentClient<$Result.GetResult<Prisma.$AgentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Agent that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentFindFirstArgs} args - Arguments to find a Agent
     * @example
     * // Get one Agent
     * const agent = await prisma.agent.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AgentFindFirstArgs>(args?: SelectSubset<T, AgentFindFirstArgs<ExtArgs>>): Prisma__AgentClient<$Result.GetResult<Prisma.$AgentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Agent that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentFindFirstOrThrowArgs} args - Arguments to find a Agent
     * @example
     * // Get one Agent
     * const agent = await prisma.agent.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AgentFindFirstOrThrowArgs>(args?: SelectSubset<T, AgentFindFirstOrThrowArgs<ExtArgs>>): Prisma__AgentClient<$Result.GetResult<Prisma.$AgentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Agents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Agents
     * const agents = await prisma.agent.findMany()
     * 
     * // Get first 10 Agents
     * const agents = await prisma.agent.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const agentWithIdOnly = await prisma.agent.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AgentFindManyArgs>(args?: SelectSubset<T, AgentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Agent.
     * @param {AgentCreateArgs} args - Arguments to create a Agent.
     * @example
     * // Create one Agent
     * const Agent = await prisma.agent.create({
     *   data: {
     *     // ... data to create a Agent
     *   }
     * })
     * 
     */
    create<T extends AgentCreateArgs>(args: SelectSubset<T, AgentCreateArgs<ExtArgs>>): Prisma__AgentClient<$Result.GetResult<Prisma.$AgentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Agents.
     * @param {AgentCreateManyArgs} args - Arguments to create many Agents.
     * @example
     * // Create many Agents
     * const agent = await prisma.agent.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AgentCreateManyArgs>(args?: SelectSubset<T, AgentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Agents and returns the data saved in the database.
     * @param {AgentCreateManyAndReturnArgs} args - Arguments to create many Agents.
     * @example
     * // Create many Agents
     * const agent = await prisma.agent.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Agents and only return the `id`
     * const agentWithIdOnly = await prisma.agent.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AgentCreateManyAndReturnArgs>(args?: SelectSubset<T, AgentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Agent.
     * @param {AgentDeleteArgs} args - Arguments to delete one Agent.
     * @example
     * // Delete one Agent
     * const Agent = await prisma.agent.delete({
     *   where: {
     *     // ... filter to delete one Agent
     *   }
     * })
     * 
     */
    delete<T extends AgentDeleteArgs>(args: SelectSubset<T, AgentDeleteArgs<ExtArgs>>): Prisma__AgentClient<$Result.GetResult<Prisma.$AgentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Agent.
     * @param {AgentUpdateArgs} args - Arguments to update one Agent.
     * @example
     * // Update one Agent
     * const agent = await prisma.agent.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AgentUpdateArgs>(args: SelectSubset<T, AgentUpdateArgs<ExtArgs>>): Prisma__AgentClient<$Result.GetResult<Prisma.$AgentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Agents.
     * @param {AgentDeleteManyArgs} args - Arguments to filter Agents to delete.
     * @example
     * // Delete a few Agents
     * const { count } = await prisma.agent.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AgentDeleteManyArgs>(args?: SelectSubset<T, AgentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Agents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Agents
     * const agent = await prisma.agent.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AgentUpdateManyArgs>(args: SelectSubset<T, AgentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Agent.
     * @param {AgentUpsertArgs} args - Arguments to update or create a Agent.
     * @example
     * // Update or create a Agent
     * const agent = await prisma.agent.upsert({
     *   create: {
     *     // ... data to create a Agent
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Agent we want to update
     *   }
     * })
     */
    upsert<T extends AgentUpsertArgs>(args: SelectSubset<T, AgentUpsertArgs<ExtArgs>>): Prisma__AgentClient<$Result.GetResult<Prisma.$AgentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Agents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentCountArgs} args - Arguments to filter Agents to count.
     * @example
     * // Count the number of Agents
     * const count = await prisma.agent.count({
     *   where: {
     *     // ... the filter for the Agents we want to count
     *   }
     * })
    **/
    count<T extends AgentCountArgs>(
      args?: Subset<T, AgentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AgentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Agent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AgentAggregateArgs>(args: Subset<T, AgentAggregateArgs>): Prisma.PrismaPromise<GetAgentAggregateType<T>>

    /**
     * Group by Agent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AgentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AgentGroupByArgs['orderBy'] }
        : { orderBy?: AgentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AgentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAgentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Agent model
   */
  readonly fields: AgentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Agent.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AgentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    notifvu<T extends Agent$notifvuArgs<ExtArgs> = {}>(args?: Subset<T, Agent$notifvuArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotifvuPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Agent model
   */ 
  interface AgentFieldRefs {
    readonly id: FieldRef<"Agent", 'Int'>
    readonly nom: FieldRef<"Agent", 'String'>
    readonly postNom: FieldRef<"Agent", 'String'>
    readonly prenom: FieldRef<"Agent", 'String'>
    readonly tel: FieldRef<"Agent", 'String'>
    readonly mdp: FieldRef<"Agent", 'String'>
    readonly matricule: FieldRef<"Agent", 'String'>
    readonly email: FieldRef<"Agent", 'String'>
    readonly salaire: FieldRef<"Agent", 'Int'>
    readonly solde: FieldRef<"Agent", 'Int'>
    readonly notificateur: FieldRef<"Agent", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Agent findUnique
   */
  export type AgentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agent
     */
    select?: AgentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentInclude<ExtArgs> | null
    /**
     * Filter, which Agent to fetch.
     */
    where: AgentWhereUniqueInput
  }

  /**
   * Agent findUniqueOrThrow
   */
  export type AgentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agent
     */
    select?: AgentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentInclude<ExtArgs> | null
    /**
     * Filter, which Agent to fetch.
     */
    where: AgentWhereUniqueInput
  }

  /**
   * Agent findFirst
   */
  export type AgentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agent
     */
    select?: AgentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentInclude<ExtArgs> | null
    /**
     * Filter, which Agent to fetch.
     */
    where?: AgentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Agents to fetch.
     */
    orderBy?: AgentOrderByWithRelationInput | AgentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Agents.
     */
    cursor?: AgentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Agents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Agents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Agents.
     */
    distinct?: AgentScalarFieldEnum | AgentScalarFieldEnum[]
  }

  /**
   * Agent findFirstOrThrow
   */
  export type AgentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agent
     */
    select?: AgentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentInclude<ExtArgs> | null
    /**
     * Filter, which Agent to fetch.
     */
    where?: AgentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Agents to fetch.
     */
    orderBy?: AgentOrderByWithRelationInput | AgentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Agents.
     */
    cursor?: AgentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Agents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Agents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Agents.
     */
    distinct?: AgentScalarFieldEnum | AgentScalarFieldEnum[]
  }

  /**
   * Agent findMany
   */
  export type AgentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agent
     */
    select?: AgentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentInclude<ExtArgs> | null
    /**
     * Filter, which Agents to fetch.
     */
    where?: AgentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Agents to fetch.
     */
    orderBy?: AgentOrderByWithRelationInput | AgentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Agents.
     */
    cursor?: AgentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Agents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Agents.
     */
    skip?: number
    distinct?: AgentScalarFieldEnum | AgentScalarFieldEnum[]
  }

  /**
   * Agent create
   */
  export type AgentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agent
     */
    select?: AgentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentInclude<ExtArgs> | null
    /**
     * The data needed to create a Agent.
     */
    data: XOR<AgentCreateInput, AgentUncheckedCreateInput>
  }

  /**
   * Agent createMany
   */
  export type AgentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Agents.
     */
    data: AgentCreateManyInput | AgentCreateManyInput[]
  }

  /**
   * Agent createManyAndReturn
   */
  export type AgentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agent
     */
    select?: AgentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Agents.
     */
    data: AgentCreateManyInput | AgentCreateManyInput[]
  }

  /**
   * Agent update
   */
  export type AgentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agent
     */
    select?: AgentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentInclude<ExtArgs> | null
    /**
     * The data needed to update a Agent.
     */
    data: XOR<AgentUpdateInput, AgentUncheckedUpdateInput>
    /**
     * Choose, which Agent to update.
     */
    where: AgentWhereUniqueInput
  }

  /**
   * Agent updateMany
   */
  export type AgentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Agents.
     */
    data: XOR<AgentUpdateManyMutationInput, AgentUncheckedUpdateManyInput>
    /**
     * Filter which Agents to update
     */
    where?: AgentWhereInput
  }

  /**
   * Agent upsert
   */
  export type AgentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agent
     */
    select?: AgentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentInclude<ExtArgs> | null
    /**
     * The filter to search for the Agent to update in case it exists.
     */
    where: AgentWhereUniqueInput
    /**
     * In case the Agent found by the `where` argument doesn't exist, create a new Agent with this data.
     */
    create: XOR<AgentCreateInput, AgentUncheckedCreateInput>
    /**
     * In case the Agent was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AgentUpdateInput, AgentUncheckedUpdateInput>
  }

  /**
   * Agent delete
   */
  export type AgentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agent
     */
    select?: AgentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentInclude<ExtArgs> | null
    /**
     * Filter which Agent to delete.
     */
    where: AgentWhereUniqueInput
  }

  /**
   * Agent deleteMany
   */
  export type AgentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Agents to delete
     */
    where?: AgentWhereInput
  }

  /**
   * Agent.notifvu
   */
  export type Agent$notifvuArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notifvu
     */
    select?: NotifvuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotifvuInclude<ExtArgs> | null
    where?: NotifvuWhereInput
    orderBy?: NotifvuOrderByWithRelationInput | NotifvuOrderByWithRelationInput[]
    cursor?: NotifvuWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotifvuScalarFieldEnum | NotifvuScalarFieldEnum[]
  }

  /**
   * Agent without action
   */
  export type AgentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agent
     */
    select?: AgentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentInclude<ExtArgs> | null
  }


  /**
   * Model Notification
   */

  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _avg: NotificationAvgAggregateOutputType | null
    _sum: NotificationSumAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationAvgAggregateOutputType = {
    id: number | null
  }

  export type NotificationSumAggregateOutputType = {
    id: number | null
  }

  export type NotificationMinAggregateOutputType = {
    id: number | null
    date: Date | null
    contenu: string | null
  }

  export type NotificationMaxAggregateOutputType = {
    id: number | null
    date: Date | null
    contenu: string | null
  }

  export type NotificationCountAggregateOutputType = {
    id: number
    date: number
    contenu: number
    _all: number
  }


  export type NotificationAvgAggregateInputType = {
    id?: true
  }

  export type NotificationSumAggregateInputType = {
    id?: true
  }

  export type NotificationMinAggregateInputType = {
    id?: true
    date?: true
    contenu?: true
  }

  export type NotificationMaxAggregateInputType = {
    id?: true
    date?: true
    contenu?: true
  }

  export type NotificationCountAggregateInputType = {
    id?: true
    date?: true
    contenu?: true
    _all?: true
  }

  export type NotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notification to aggregate.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NotificationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NotificationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type NotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithAggregationInput | NotificationOrderByWithAggregationInput[]
    by: NotificationScalarFieldEnum[] | NotificationScalarFieldEnum
    having?: NotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _avg?: NotificationAvgAggregateInputType
    _sum?: NotificationSumAggregateInputType
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }

  export type NotificationGroupByOutputType = {
    id: number
    date: Date
    contenu: string
    _count: NotificationCountAggregateOutputType | null
    _avg: NotificationAvgAggregateOutputType | null
    _sum: NotificationSumAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    contenu?: boolean
    notifvu?: boolean | Notification$notifvuArgs<ExtArgs>
    _count?: boolean | NotificationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    contenu?: boolean
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectScalar = {
    id?: boolean
    date?: boolean
    contenu?: boolean
  }

  export type NotificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    notifvu?: boolean | Notification$notifvuArgs<ExtArgs>
    _count?: boolean | NotificationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type NotificationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $NotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notification"
    objects: {
      notifvu: Prisma.$NotifvuPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      date: Date
      contenu: string
    }, ExtArgs["result"]["notification"]>
    composites: {}
  }

  type NotificationGetPayload<S extends boolean | null | undefined | NotificationDefaultArgs> = $Result.GetResult<Prisma.$NotificationPayload, S>

  type NotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NotificationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NotificationCountAggregateInputType | true
    }

  export interface NotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notification'], meta: { name: 'Notification' } }
    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationFindUniqueArgs>(args: SelectSubset<T, NotificationFindUniqueArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Notification that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {NotificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationFindFirstArgs>(args?: SelectSubset<T, NotificationFindFirstArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Notification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationWithIdOnly = await prisma.notification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationFindManyArgs>(args?: SelectSubset<T, NotificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
     */
    create<T extends NotificationCreateArgs>(args: SelectSubset<T, NotificationCreateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Notifications.
     * @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationCreateManyArgs>(args?: SelectSubset<T, NotificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Notifications and returns the data saved in the database.
     * @param {NotificationCreateManyAndReturnArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NotificationCreateManyAndReturnArgs>(args?: SelectSubset<T, NotificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
     */
    delete<T extends NotificationDeleteArgs>(args: SelectSubset<T, NotificationDeleteArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationUpdateArgs>(args: SelectSubset<T, NotificationUpdateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationDeleteManyArgs>(args?: SelectSubset<T, NotificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationUpdateManyArgs>(args: SelectSubset<T, NotificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
     */
    upsert<T extends NotificationUpsertArgs>(args: SelectSubset<T, NotificationUpsertArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): Prisma.PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notification model
   */
  readonly fields: NotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    notifvu<T extends Notification$notifvuArgs<ExtArgs> = {}>(args?: Subset<T, Notification$notifvuArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotifvuPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Notification model
   */ 
  interface NotificationFieldRefs {
    readonly id: FieldRef<"Notification", 'Int'>
    readonly date: FieldRef<"Notification", 'DateTime'>
    readonly contenu: FieldRef<"Notification", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Notification findUnique
   */
  export type NotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findUniqueOrThrow
   */
  export type NotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findFirst
   */
  export type NotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findFirstOrThrow
   */
  export type NotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification create
   */
  export type NotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to create a Notification.
     */
    data: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
  }

  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
  }

  /**
   * Notification createManyAndReturn
   */
  export type NotificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
  }

  /**
   * Notification update
   */
  export type NotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to update a Notification.
     */
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
    /**
     * Choose, which Notification to update.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
  }

  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The filter to search for the Notification to update in case it exists.
     */
    where: NotificationWhereUniqueInput
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     */
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
  }

  /**
   * Notification delete
   */
  export type NotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter which Notification to delete.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationWhereInput
  }

  /**
   * Notification.notifvu
   */
  export type Notification$notifvuArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notifvu
     */
    select?: NotifvuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotifvuInclude<ExtArgs> | null
    where?: NotifvuWhereInput
    orderBy?: NotifvuOrderByWithRelationInput | NotifvuOrderByWithRelationInput[]
    cursor?: NotifvuWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotifvuScalarFieldEnum | NotifvuScalarFieldEnum[]
  }

  /**
   * Notification without action
   */
  export type NotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
  }


  /**
   * Model Notifvu
   */

  export type AggregateNotifvu = {
    _count: NotifvuCountAggregateOutputType | null
    _avg: NotifvuAvgAggregateOutputType | null
    _sum: NotifvuSumAggregateOutputType | null
    _min: NotifvuMinAggregateOutputType | null
    _max: NotifvuMaxAggregateOutputType | null
  }

  export type NotifvuAvgAggregateOutputType = {
    id: number | null
    idAgent: number | null
    idNotification: number | null
  }

  export type NotifvuSumAggregateOutputType = {
    id: number | null
    idAgent: number | null
    idNotification: number | null
  }

  export type NotifvuMinAggregateOutputType = {
    id: number | null
    idAgent: number | null
    idNotification: number | null
  }

  export type NotifvuMaxAggregateOutputType = {
    id: number | null
    idAgent: number | null
    idNotification: number | null
  }

  export type NotifvuCountAggregateOutputType = {
    id: number
    idAgent: number
    idNotification: number
    _all: number
  }


  export type NotifvuAvgAggregateInputType = {
    id?: true
    idAgent?: true
    idNotification?: true
  }

  export type NotifvuSumAggregateInputType = {
    id?: true
    idAgent?: true
    idNotification?: true
  }

  export type NotifvuMinAggregateInputType = {
    id?: true
    idAgent?: true
    idNotification?: true
  }

  export type NotifvuMaxAggregateInputType = {
    id?: true
    idAgent?: true
    idNotification?: true
  }

  export type NotifvuCountAggregateInputType = {
    id?: true
    idAgent?: true
    idNotification?: true
    _all?: true
  }

  export type NotifvuAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifvu to aggregate.
     */
    where?: NotifvuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifvus to fetch.
     */
    orderBy?: NotifvuOrderByWithRelationInput | NotifvuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotifvuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifvus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifvus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifvus
    **/
    _count?: true | NotifvuCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NotifvuAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NotifvuSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotifvuMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotifvuMaxAggregateInputType
  }

  export type GetNotifvuAggregateType<T extends NotifvuAggregateArgs> = {
        [P in keyof T & keyof AggregateNotifvu]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotifvu[P]>
      : GetScalarType<T[P], AggregateNotifvu[P]>
  }




  export type NotifvuGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotifvuWhereInput
    orderBy?: NotifvuOrderByWithAggregationInput | NotifvuOrderByWithAggregationInput[]
    by: NotifvuScalarFieldEnum[] | NotifvuScalarFieldEnum
    having?: NotifvuScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotifvuCountAggregateInputType | true
    _avg?: NotifvuAvgAggregateInputType
    _sum?: NotifvuSumAggregateInputType
    _min?: NotifvuMinAggregateInputType
    _max?: NotifvuMaxAggregateInputType
  }

  export type NotifvuGroupByOutputType = {
    id: number
    idAgent: number | null
    idNotification: number | null
    _count: NotifvuCountAggregateOutputType | null
    _avg: NotifvuAvgAggregateOutputType | null
    _sum: NotifvuSumAggregateOutputType | null
    _min: NotifvuMinAggregateOutputType | null
    _max: NotifvuMaxAggregateOutputType | null
  }

  type GetNotifvuGroupByPayload<T extends NotifvuGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotifvuGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotifvuGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotifvuGroupByOutputType[P]>
            : GetScalarType<T[P], NotifvuGroupByOutputType[P]>
        }
      >
    >


  export type NotifvuSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    idAgent?: boolean
    idNotification?: boolean
    notification?: boolean | Notifvu$notificationArgs<ExtArgs>
    agent?: boolean | Notifvu$agentArgs<ExtArgs>
  }, ExtArgs["result"]["notifvu"]>

  export type NotifvuSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    idAgent?: boolean
    idNotification?: boolean
    notification?: boolean | Notifvu$notificationArgs<ExtArgs>
    agent?: boolean | Notifvu$agentArgs<ExtArgs>
  }, ExtArgs["result"]["notifvu"]>

  export type NotifvuSelectScalar = {
    id?: boolean
    idAgent?: boolean
    idNotification?: boolean
  }

  export type NotifvuInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    notification?: boolean | Notifvu$notificationArgs<ExtArgs>
    agent?: boolean | Notifvu$agentArgs<ExtArgs>
  }
  export type NotifvuIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    notification?: boolean | Notifvu$notificationArgs<ExtArgs>
    agent?: boolean | Notifvu$agentArgs<ExtArgs>
  }

  export type $NotifvuPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notifvu"
    objects: {
      notification: Prisma.$NotificationPayload<ExtArgs> | null
      agent: Prisma.$AgentPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      idAgent: number | null
      idNotification: number | null
    }, ExtArgs["result"]["notifvu"]>
    composites: {}
  }

  type NotifvuGetPayload<S extends boolean | null | undefined | NotifvuDefaultArgs> = $Result.GetResult<Prisma.$NotifvuPayload, S>

  type NotifvuCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NotifvuFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NotifvuCountAggregateInputType | true
    }

  export interface NotifvuDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notifvu'], meta: { name: 'Notifvu' } }
    /**
     * Find zero or one Notifvu that matches the filter.
     * @param {NotifvuFindUniqueArgs} args - Arguments to find a Notifvu
     * @example
     * // Get one Notifvu
     * const notifvu = await prisma.notifvu.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotifvuFindUniqueArgs>(args: SelectSubset<T, NotifvuFindUniqueArgs<ExtArgs>>): Prisma__NotifvuClient<$Result.GetResult<Prisma.$NotifvuPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Notifvu that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {NotifvuFindUniqueOrThrowArgs} args - Arguments to find a Notifvu
     * @example
     * // Get one Notifvu
     * const notifvu = await prisma.notifvu.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotifvuFindUniqueOrThrowArgs>(args: SelectSubset<T, NotifvuFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotifvuClient<$Result.GetResult<Prisma.$NotifvuPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Notifvu that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotifvuFindFirstArgs} args - Arguments to find a Notifvu
     * @example
     * // Get one Notifvu
     * const notifvu = await prisma.notifvu.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotifvuFindFirstArgs>(args?: SelectSubset<T, NotifvuFindFirstArgs<ExtArgs>>): Prisma__NotifvuClient<$Result.GetResult<Prisma.$NotifvuPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Notifvu that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotifvuFindFirstOrThrowArgs} args - Arguments to find a Notifvu
     * @example
     * // Get one Notifvu
     * const notifvu = await prisma.notifvu.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotifvuFindFirstOrThrowArgs>(args?: SelectSubset<T, NotifvuFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotifvuClient<$Result.GetResult<Prisma.$NotifvuPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Notifvus that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotifvuFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifvus
     * const notifvus = await prisma.notifvu.findMany()
     * 
     * // Get first 10 Notifvus
     * const notifvus = await prisma.notifvu.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notifvuWithIdOnly = await prisma.notifvu.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotifvuFindManyArgs>(args?: SelectSubset<T, NotifvuFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotifvuPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Notifvu.
     * @param {NotifvuCreateArgs} args - Arguments to create a Notifvu.
     * @example
     * // Create one Notifvu
     * const Notifvu = await prisma.notifvu.create({
     *   data: {
     *     // ... data to create a Notifvu
     *   }
     * })
     * 
     */
    create<T extends NotifvuCreateArgs>(args: SelectSubset<T, NotifvuCreateArgs<ExtArgs>>): Prisma__NotifvuClient<$Result.GetResult<Prisma.$NotifvuPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Notifvus.
     * @param {NotifvuCreateManyArgs} args - Arguments to create many Notifvus.
     * @example
     * // Create many Notifvus
     * const notifvu = await prisma.notifvu.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotifvuCreateManyArgs>(args?: SelectSubset<T, NotifvuCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Notifvus and returns the data saved in the database.
     * @param {NotifvuCreateManyAndReturnArgs} args - Arguments to create many Notifvus.
     * @example
     * // Create many Notifvus
     * const notifvu = await prisma.notifvu.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Notifvus and only return the `id`
     * const notifvuWithIdOnly = await prisma.notifvu.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NotifvuCreateManyAndReturnArgs>(args?: SelectSubset<T, NotifvuCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotifvuPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Notifvu.
     * @param {NotifvuDeleteArgs} args - Arguments to delete one Notifvu.
     * @example
     * // Delete one Notifvu
     * const Notifvu = await prisma.notifvu.delete({
     *   where: {
     *     // ... filter to delete one Notifvu
     *   }
     * })
     * 
     */
    delete<T extends NotifvuDeleteArgs>(args: SelectSubset<T, NotifvuDeleteArgs<ExtArgs>>): Prisma__NotifvuClient<$Result.GetResult<Prisma.$NotifvuPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Notifvu.
     * @param {NotifvuUpdateArgs} args - Arguments to update one Notifvu.
     * @example
     * // Update one Notifvu
     * const notifvu = await prisma.notifvu.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotifvuUpdateArgs>(args: SelectSubset<T, NotifvuUpdateArgs<ExtArgs>>): Prisma__NotifvuClient<$Result.GetResult<Prisma.$NotifvuPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Notifvus.
     * @param {NotifvuDeleteManyArgs} args - Arguments to filter Notifvus to delete.
     * @example
     * // Delete a few Notifvus
     * const { count } = await prisma.notifvu.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotifvuDeleteManyArgs>(args?: SelectSubset<T, NotifvuDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifvus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotifvuUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifvus
     * const notifvu = await prisma.notifvu.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotifvuUpdateManyArgs>(args: SelectSubset<T, NotifvuUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Notifvu.
     * @param {NotifvuUpsertArgs} args - Arguments to update or create a Notifvu.
     * @example
     * // Update or create a Notifvu
     * const notifvu = await prisma.notifvu.upsert({
     *   create: {
     *     // ... data to create a Notifvu
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notifvu we want to update
     *   }
     * })
     */
    upsert<T extends NotifvuUpsertArgs>(args: SelectSubset<T, NotifvuUpsertArgs<ExtArgs>>): Prisma__NotifvuClient<$Result.GetResult<Prisma.$NotifvuPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Notifvus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotifvuCountArgs} args - Arguments to filter Notifvus to count.
     * @example
     * // Count the number of Notifvus
     * const count = await prisma.notifvu.count({
     *   where: {
     *     // ... the filter for the Notifvus we want to count
     *   }
     * })
    **/
    count<T extends NotifvuCountArgs>(
      args?: Subset<T, NotifvuCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotifvuCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notifvu.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotifvuAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotifvuAggregateArgs>(args: Subset<T, NotifvuAggregateArgs>): Prisma.PrismaPromise<GetNotifvuAggregateType<T>>

    /**
     * Group by Notifvu.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotifvuGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotifvuGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotifvuGroupByArgs['orderBy'] }
        : { orderBy?: NotifvuGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotifvuGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotifvuGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notifvu model
   */
  readonly fields: NotifvuFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notifvu.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotifvuClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    notification<T extends Notifvu$notificationArgs<ExtArgs> = {}>(args?: Subset<T, Notifvu$notificationArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    agent<T extends Notifvu$agentArgs<ExtArgs> = {}>(args?: Subset<T, Notifvu$agentArgs<ExtArgs>>): Prisma__AgentClient<$Result.GetResult<Prisma.$AgentPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Notifvu model
   */ 
  interface NotifvuFieldRefs {
    readonly id: FieldRef<"Notifvu", 'Int'>
    readonly idAgent: FieldRef<"Notifvu", 'Int'>
    readonly idNotification: FieldRef<"Notifvu", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Notifvu findUnique
   */
  export type NotifvuFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notifvu
     */
    select?: NotifvuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotifvuInclude<ExtArgs> | null
    /**
     * Filter, which Notifvu to fetch.
     */
    where: NotifvuWhereUniqueInput
  }

  /**
   * Notifvu findUniqueOrThrow
   */
  export type NotifvuFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notifvu
     */
    select?: NotifvuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotifvuInclude<ExtArgs> | null
    /**
     * Filter, which Notifvu to fetch.
     */
    where: NotifvuWhereUniqueInput
  }

  /**
   * Notifvu findFirst
   */
  export type NotifvuFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notifvu
     */
    select?: NotifvuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotifvuInclude<ExtArgs> | null
    /**
     * Filter, which Notifvu to fetch.
     */
    where?: NotifvuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifvus to fetch.
     */
    orderBy?: NotifvuOrderByWithRelationInput | NotifvuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifvus.
     */
    cursor?: NotifvuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifvus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifvus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifvus.
     */
    distinct?: NotifvuScalarFieldEnum | NotifvuScalarFieldEnum[]
  }

  /**
   * Notifvu findFirstOrThrow
   */
  export type NotifvuFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notifvu
     */
    select?: NotifvuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotifvuInclude<ExtArgs> | null
    /**
     * Filter, which Notifvu to fetch.
     */
    where?: NotifvuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifvus to fetch.
     */
    orderBy?: NotifvuOrderByWithRelationInput | NotifvuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifvus.
     */
    cursor?: NotifvuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifvus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifvus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifvus.
     */
    distinct?: NotifvuScalarFieldEnum | NotifvuScalarFieldEnum[]
  }

  /**
   * Notifvu findMany
   */
  export type NotifvuFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notifvu
     */
    select?: NotifvuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotifvuInclude<ExtArgs> | null
    /**
     * Filter, which Notifvus to fetch.
     */
    where?: NotifvuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifvus to fetch.
     */
    orderBy?: NotifvuOrderByWithRelationInput | NotifvuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifvus.
     */
    cursor?: NotifvuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifvus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifvus.
     */
    skip?: number
    distinct?: NotifvuScalarFieldEnum | NotifvuScalarFieldEnum[]
  }

  /**
   * Notifvu create
   */
  export type NotifvuCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notifvu
     */
    select?: NotifvuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotifvuInclude<ExtArgs> | null
    /**
     * The data needed to create a Notifvu.
     */
    data?: XOR<NotifvuCreateInput, NotifvuUncheckedCreateInput>
  }

  /**
   * Notifvu createMany
   */
  export type NotifvuCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notifvus.
     */
    data: NotifvuCreateManyInput | NotifvuCreateManyInput[]
  }

  /**
   * Notifvu createManyAndReturn
   */
  export type NotifvuCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notifvu
     */
    select?: NotifvuSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Notifvus.
     */
    data: NotifvuCreateManyInput | NotifvuCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotifvuIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Notifvu update
   */
  export type NotifvuUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notifvu
     */
    select?: NotifvuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotifvuInclude<ExtArgs> | null
    /**
     * The data needed to update a Notifvu.
     */
    data: XOR<NotifvuUpdateInput, NotifvuUncheckedUpdateInput>
    /**
     * Choose, which Notifvu to update.
     */
    where: NotifvuWhereUniqueInput
  }

  /**
   * Notifvu updateMany
   */
  export type NotifvuUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notifvus.
     */
    data: XOR<NotifvuUpdateManyMutationInput, NotifvuUncheckedUpdateManyInput>
    /**
     * Filter which Notifvus to update
     */
    where?: NotifvuWhereInput
  }

  /**
   * Notifvu upsert
   */
  export type NotifvuUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notifvu
     */
    select?: NotifvuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotifvuInclude<ExtArgs> | null
    /**
     * The filter to search for the Notifvu to update in case it exists.
     */
    where: NotifvuWhereUniqueInput
    /**
     * In case the Notifvu found by the `where` argument doesn't exist, create a new Notifvu with this data.
     */
    create: XOR<NotifvuCreateInput, NotifvuUncheckedCreateInput>
    /**
     * In case the Notifvu was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotifvuUpdateInput, NotifvuUncheckedUpdateInput>
  }

  /**
   * Notifvu delete
   */
  export type NotifvuDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notifvu
     */
    select?: NotifvuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotifvuInclude<ExtArgs> | null
    /**
     * Filter which Notifvu to delete.
     */
    where: NotifvuWhereUniqueInput
  }

  /**
   * Notifvu deleteMany
   */
  export type NotifvuDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifvus to delete
     */
    where?: NotifvuWhereInput
  }

  /**
   * Notifvu.notification
   */
  export type Notifvu$notificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
  }

  /**
   * Notifvu.agent
   */
  export type Notifvu$agentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agent
     */
    select?: AgentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentInclude<ExtArgs> | null
    where?: AgentWhereInput
  }

  /**
   * Notifvu without action
   */
  export type NotifvuDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notifvu
     */
    select?: NotifvuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotifvuInclude<ExtArgs> | null
  }


  /**
   * Model Banque
   */

  export type AggregateBanque = {
    _count: BanqueCountAggregateOutputType | null
    _avg: BanqueAvgAggregateOutputType | null
    _sum: BanqueSumAggregateOutputType | null
    _min: BanqueMinAggregateOutputType | null
    _max: BanqueMaxAggregateOutputType | null
  }

  export type BanqueAvgAggregateOutputType = {
    id: number | null
    montant: number | null
  }

  export type BanqueSumAggregateOutputType = {
    id: number | null
    montant: number | null
  }

  export type BanqueMinAggregateOutputType = {
    id: number | null
    mdp: string | null
    montant: number | null
  }

  export type BanqueMaxAggregateOutputType = {
    id: number | null
    mdp: string | null
    montant: number | null
  }

  export type BanqueCountAggregateOutputType = {
    id: number
    mdp: number
    montant: number
    _all: number
  }


  export type BanqueAvgAggregateInputType = {
    id?: true
    montant?: true
  }

  export type BanqueSumAggregateInputType = {
    id?: true
    montant?: true
  }

  export type BanqueMinAggregateInputType = {
    id?: true
    mdp?: true
    montant?: true
  }

  export type BanqueMaxAggregateInputType = {
    id?: true
    mdp?: true
    montant?: true
  }

  export type BanqueCountAggregateInputType = {
    id?: true
    mdp?: true
    montant?: true
    _all?: true
  }

  export type BanqueAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Banque to aggregate.
     */
    where?: BanqueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Banques to fetch.
     */
    orderBy?: BanqueOrderByWithRelationInput | BanqueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BanqueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Banques from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Banques.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Banques
    **/
    _count?: true | BanqueCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BanqueAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BanqueSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BanqueMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BanqueMaxAggregateInputType
  }

  export type GetBanqueAggregateType<T extends BanqueAggregateArgs> = {
        [P in keyof T & keyof AggregateBanque]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBanque[P]>
      : GetScalarType<T[P], AggregateBanque[P]>
  }




  export type BanqueGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BanqueWhereInput
    orderBy?: BanqueOrderByWithAggregationInput | BanqueOrderByWithAggregationInput[]
    by: BanqueScalarFieldEnum[] | BanqueScalarFieldEnum
    having?: BanqueScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BanqueCountAggregateInputType | true
    _avg?: BanqueAvgAggregateInputType
    _sum?: BanqueSumAggregateInputType
    _min?: BanqueMinAggregateInputType
    _max?: BanqueMaxAggregateInputType
  }

  export type BanqueGroupByOutputType = {
    id: number
    mdp: string
    montant: number
    _count: BanqueCountAggregateOutputType | null
    _avg: BanqueAvgAggregateOutputType | null
    _sum: BanqueSumAggregateOutputType | null
    _min: BanqueMinAggregateOutputType | null
    _max: BanqueMaxAggregateOutputType | null
  }

  type GetBanqueGroupByPayload<T extends BanqueGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BanqueGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BanqueGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BanqueGroupByOutputType[P]>
            : GetScalarType<T[P], BanqueGroupByOutputType[P]>
        }
      >
    >


  export type BanqueSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    mdp?: boolean
    montant?: boolean
  }, ExtArgs["result"]["banque"]>

  export type BanqueSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    mdp?: boolean
    montant?: boolean
  }, ExtArgs["result"]["banque"]>

  export type BanqueSelectScalar = {
    id?: boolean
    mdp?: boolean
    montant?: boolean
  }


  export type $BanquePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Banque"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      mdp: string
      montant: number
    }, ExtArgs["result"]["banque"]>
    composites: {}
  }

  type BanqueGetPayload<S extends boolean | null | undefined | BanqueDefaultArgs> = $Result.GetResult<Prisma.$BanquePayload, S>

  type BanqueCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BanqueFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BanqueCountAggregateInputType | true
    }

  export interface BanqueDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Banque'], meta: { name: 'Banque' } }
    /**
     * Find zero or one Banque that matches the filter.
     * @param {BanqueFindUniqueArgs} args - Arguments to find a Banque
     * @example
     * // Get one Banque
     * const banque = await prisma.banque.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BanqueFindUniqueArgs>(args: SelectSubset<T, BanqueFindUniqueArgs<ExtArgs>>): Prisma__BanqueClient<$Result.GetResult<Prisma.$BanquePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Banque that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BanqueFindUniqueOrThrowArgs} args - Arguments to find a Banque
     * @example
     * // Get one Banque
     * const banque = await prisma.banque.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BanqueFindUniqueOrThrowArgs>(args: SelectSubset<T, BanqueFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BanqueClient<$Result.GetResult<Prisma.$BanquePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Banque that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BanqueFindFirstArgs} args - Arguments to find a Banque
     * @example
     * // Get one Banque
     * const banque = await prisma.banque.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BanqueFindFirstArgs>(args?: SelectSubset<T, BanqueFindFirstArgs<ExtArgs>>): Prisma__BanqueClient<$Result.GetResult<Prisma.$BanquePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Banque that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BanqueFindFirstOrThrowArgs} args - Arguments to find a Banque
     * @example
     * // Get one Banque
     * const banque = await prisma.banque.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BanqueFindFirstOrThrowArgs>(args?: SelectSubset<T, BanqueFindFirstOrThrowArgs<ExtArgs>>): Prisma__BanqueClient<$Result.GetResult<Prisma.$BanquePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Banques that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BanqueFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Banques
     * const banques = await prisma.banque.findMany()
     * 
     * // Get first 10 Banques
     * const banques = await prisma.banque.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const banqueWithIdOnly = await prisma.banque.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BanqueFindManyArgs>(args?: SelectSubset<T, BanqueFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BanquePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Banque.
     * @param {BanqueCreateArgs} args - Arguments to create a Banque.
     * @example
     * // Create one Banque
     * const Banque = await prisma.banque.create({
     *   data: {
     *     // ... data to create a Banque
     *   }
     * })
     * 
     */
    create<T extends BanqueCreateArgs>(args: SelectSubset<T, BanqueCreateArgs<ExtArgs>>): Prisma__BanqueClient<$Result.GetResult<Prisma.$BanquePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Banques.
     * @param {BanqueCreateManyArgs} args - Arguments to create many Banques.
     * @example
     * // Create many Banques
     * const banque = await prisma.banque.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BanqueCreateManyArgs>(args?: SelectSubset<T, BanqueCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Banques and returns the data saved in the database.
     * @param {BanqueCreateManyAndReturnArgs} args - Arguments to create many Banques.
     * @example
     * // Create many Banques
     * const banque = await prisma.banque.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Banques and only return the `id`
     * const banqueWithIdOnly = await prisma.banque.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BanqueCreateManyAndReturnArgs>(args?: SelectSubset<T, BanqueCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BanquePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Banque.
     * @param {BanqueDeleteArgs} args - Arguments to delete one Banque.
     * @example
     * // Delete one Banque
     * const Banque = await prisma.banque.delete({
     *   where: {
     *     // ... filter to delete one Banque
     *   }
     * })
     * 
     */
    delete<T extends BanqueDeleteArgs>(args: SelectSubset<T, BanqueDeleteArgs<ExtArgs>>): Prisma__BanqueClient<$Result.GetResult<Prisma.$BanquePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Banque.
     * @param {BanqueUpdateArgs} args - Arguments to update one Banque.
     * @example
     * // Update one Banque
     * const banque = await prisma.banque.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BanqueUpdateArgs>(args: SelectSubset<T, BanqueUpdateArgs<ExtArgs>>): Prisma__BanqueClient<$Result.GetResult<Prisma.$BanquePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Banques.
     * @param {BanqueDeleteManyArgs} args - Arguments to filter Banques to delete.
     * @example
     * // Delete a few Banques
     * const { count } = await prisma.banque.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BanqueDeleteManyArgs>(args?: SelectSubset<T, BanqueDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Banques.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BanqueUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Banques
     * const banque = await prisma.banque.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BanqueUpdateManyArgs>(args: SelectSubset<T, BanqueUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Banque.
     * @param {BanqueUpsertArgs} args - Arguments to update or create a Banque.
     * @example
     * // Update or create a Banque
     * const banque = await prisma.banque.upsert({
     *   create: {
     *     // ... data to create a Banque
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Banque we want to update
     *   }
     * })
     */
    upsert<T extends BanqueUpsertArgs>(args: SelectSubset<T, BanqueUpsertArgs<ExtArgs>>): Prisma__BanqueClient<$Result.GetResult<Prisma.$BanquePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Banques.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BanqueCountArgs} args - Arguments to filter Banques to count.
     * @example
     * // Count the number of Banques
     * const count = await prisma.banque.count({
     *   where: {
     *     // ... the filter for the Banques we want to count
     *   }
     * })
    **/
    count<T extends BanqueCountArgs>(
      args?: Subset<T, BanqueCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BanqueCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Banque.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BanqueAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BanqueAggregateArgs>(args: Subset<T, BanqueAggregateArgs>): Prisma.PrismaPromise<GetBanqueAggregateType<T>>

    /**
     * Group by Banque.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BanqueGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BanqueGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BanqueGroupByArgs['orderBy'] }
        : { orderBy?: BanqueGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BanqueGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBanqueGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Banque model
   */
  readonly fields: BanqueFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Banque.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BanqueClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Banque model
   */ 
  interface BanqueFieldRefs {
    readonly id: FieldRef<"Banque", 'Int'>
    readonly mdp: FieldRef<"Banque", 'String'>
    readonly montant: FieldRef<"Banque", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Banque findUnique
   */
  export type BanqueFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Banque
     */
    select?: BanqueSelect<ExtArgs> | null
    /**
     * Filter, which Banque to fetch.
     */
    where: BanqueWhereUniqueInput
  }

  /**
   * Banque findUniqueOrThrow
   */
  export type BanqueFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Banque
     */
    select?: BanqueSelect<ExtArgs> | null
    /**
     * Filter, which Banque to fetch.
     */
    where: BanqueWhereUniqueInput
  }

  /**
   * Banque findFirst
   */
  export type BanqueFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Banque
     */
    select?: BanqueSelect<ExtArgs> | null
    /**
     * Filter, which Banque to fetch.
     */
    where?: BanqueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Banques to fetch.
     */
    orderBy?: BanqueOrderByWithRelationInput | BanqueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Banques.
     */
    cursor?: BanqueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Banques from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Banques.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Banques.
     */
    distinct?: BanqueScalarFieldEnum | BanqueScalarFieldEnum[]
  }

  /**
   * Banque findFirstOrThrow
   */
  export type BanqueFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Banque
     */
    select?: BanqueSelect<ExtArgs> | null
    /**
     * Filter, which Banque to fetch.
     */
    where?: BanqueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Banques to fetch.
     */
    orderBy?: BanqueOrderByWithRelationInput | BanqueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Banques.
     */
    cursor?: BanqueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Banques from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Banques.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Banques.
     */
    distinct?: BanqueScalarFieldEnum | BanqueScalarFieldEnum[]
  }

  /**
   * Banque findMany
   */
  export type BanqueFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Banque
     */
    select?: BanqueSelect<ExtArgs> | null
    /**
     * Filter, which Banques to fetch.
     */
    where?: BanqueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Banques to fetch.
     */
    orderBy?: BanqueOrderByWithRelationInput | BanqueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Banques.
     */
    cursor?: BanqueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Banques from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Banques.
     */
    skip?: number
    distinct?: BanqueScalarFieldEnum | BanqueScalarFieldEnum[]
  }

  /**
   * Banque create
   */
  export type BanqueCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Banque
     */
    select?: BanqueSelect<ExtArgs> | null
    /**
     * The data needed to create a Banque.
     */
    data: XOR<BanqueCreateInput, BanqueUncheckedCreateInput>
  }

  /**
   * Banque createMany
   */
  export type BanqueCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Banques.
     */
    data: BanqueCreateManyInput | BanqueCreateManyInput[]
  }

  /**
   * Banque createManyAndReturn
   */
  export type BanqueCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Banque
     */
    select?: BanqueSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Banques.
     */
    data: BanqueCreateManyInput | BanqueCreateManyInput[]
  }

  /**
   * Banque update
   */
  export type BanqueUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Banque
     */
    select?: BanqueSelect<ExtArgs> | null
    /**
     * The data needed to update a Banque.
     */
    data: XOR<BanqueUpdateInput, BanqueUncheckedUpdateInput>
    /**
     * Choose, which Banque to update.
     */
    where: BanqueWhereUniqueInput
  }

  /**
   * Banque updateMany
   */
  export type BanqueUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Banques.
     */
    data: XOR<BanqueUpdateManyMutationInput, BanqueUncheckedUpdateManyInput>
    /**
     * Filter which Banques to update
     */
    where?: BanqueWhereInput
  }

  /**
   * Banque upsert
   */
  export type BanqueUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Banque
     */
    select?: BanqueSelect<ExtArgs> | null
    /**
     * The filter to search for the Banque to update in case it exists.
     */
    where: BanqueWhereUniqueInput
    /**
     * In case the Banque found by the `where` argument doesn't exist, create a new Banque with this data.
     */
    create: XOR<BanqueCreateInput, BanqueUncheckedCreateInput>
    /**
     * In case the Banque was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BanqueUpdateInput, BanqueUncheckedUpdateInput>
  }

  /**
   * Banque delete
   */
  export type BanqueDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Banque
     */
    select?: BanqueSelect<ExtArgs> | null
    /**
     * Filter which Banque to delete.
     */
    where: BanqueWhereUniqueInput
  }

  /**
   * Banque deleteMany
   */
  export type BanqueDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Banques to delete
     */
    where?: BanqueWhereInput
  }

  /**
   * Banque without action
   */
  export type BanqueDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Banque
     */
    select?: BanqueSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const AgentScalarFieldEnum: {
    id: 'id',
    nom: 'nom',
    postNom: 'postNom',
    prenom: 'prenom',
    tel: 'tel',
    mdp: 'mdp',
    matricule: 'matricule',
    email: 'email',
    salaire: 'salaire',
    solde: 'solde',
    notificateur: 'notificateur'
  };

  export type AgentScalarFieldEnum = (typeof AgentScalarFieldEnum)[keyof typeof AgentScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    id: 'id',
    date: 'date',
    contenu: 'contenu'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const NotifvuScalarFieldEnum: {
    id: 'id',
    idAgent: 'idAgent',
    idNotification: 'idNotification'
  };

  export type NotifvuScalarFieldEnum = (typeof NotifvuScalarFieldEnum)[keyof typeof NotifvuScalarFieldEnum]


  export const BanqueScalarFieldEnum: {
    id: 'id',
    mdp: 'mdp',
    montant: 'montant'
  };

  export type BanqueScalarFieldEnum = (typeof BanqueScalarFieldEnum)[keyof typeof BanqueScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type AgentWhereInput = {
    AND?: AgentWhereInput | AgentWhereInput[]
    OR?: AgentWhereInput[]
    NOT?: AgentWhereInput | AgentWhereInput[]
    id?: IntFilter<"Agent"> | number
    nom?: StringFilter<"Agent"> | string
    postNom?: StringFilter<"Agent"> | string
    prenom?: StringFilter<"Agent"> | string
    tel?: StringFilter<"Agent"> | string
    mdp?: StringFilter<"Agent"> | string
    matricule?: StringFilter<"Agent"> | string
    email?: StringFilter<"Agent"> | string
    salaire?: IntFilter<"Agent"> | number
    solde?: IntFilter<"Agent"> | number
    notificateur?: BoolFilter<"Agent"> | boolean
    notifvu?: NotifvuListRelationFilter
  }

  export type AgentOrderByWithRelationInput = {
    id?: SortOrder
    nom?: SortOrder
    postNom?: SortOrder
    prenom?: SortOrder
    tel?: SortOrder
    mdp?: SortOrder
    matricule?: SortOrder
    email?: SortOrder
    salaire?: SortOrder
    solde?: SortOrder
    notificateur?: SortOrder
    notifvu?: NotifvuOrderByRelationAggregateInput
  }

  export type AgentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: AgentWhereInput | AgentWhereInput[]
    OR?: AgentWhereInput[]
    NOT?: AgentWhereInput | AgentWhereInput[]
    nom?: StringFilter<"Agent"> | string
    postNom?: StringFilter<"Agent"> | string
    prenom?: StringFilter<"Agent"> | string
    tel?: StringFilter<"Agent"> | string
    mdp?: StringFilter<"Agent"> | string
    matricule?: StringFilter<"Agent"> | string
    salaire?: IntFilter<"Agent"> | number
    solde?: IntFilter<"Agent"> | number
    notificateur?: BoolFilter<"Agent"> | boolean
    notifvu?: NotifvuListRelationFilter
  }, "id" | "email">

  export type AgentOrderByWithAggregationInput = {
    id?: SortOrder
    nom?: SortOrder
    postNom?: SortOrder
    prenom?: SortOrder
    tel?: SortOrder
    mdp?: SortOrder
    matricule?: SortOrder
    email?: SortOrder
    salaire?: SortOrder
    solde?: SortOrder
    notificateur?: SortOrder
    _count?: AgentCountOrderByAggregateInput
    _avg?: AgentAvgOrderByAggregateInput
    _max?: AgentMaxOrderByAggregateInput
    _min?: AgentMinOrderByAggregateInput
    _sum?: AgentSumOrderByAggregateInput
  }

  export type AgentScalarWhereWithAggregatesInput = {
    AND?: AgentScalarWhereWithAggregatesInput | AgentScalarWhereWithAggregatesInput[]
    OR?: AgentScalarWhereWithAggregatesInput[]
    NOT?: AgentScalarWhereWithAggregatesInput | AgentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Agent"> | number
    nom?: StringWithAggregatesFilter<"Agent"> | string
    postNom?: StringWithAggregatesFilter<"Agent"> | string
    prenom?: StringWithAggregatesFilter<"Agent"> | string
    tel?: StringWithAggregatesFilter<"Agent"> | string
    mdp?: StringWithAggregatesFilter<"Agent"> | string
    matricule?: StringWithAggregatesFilter<"Agent"> | string
    email?: StringWithAggregatesFilter<"Agent"> | string
    salaire?: IntWithAggregatesFilter<"Agent"> | number
    solde?: IntWithAggregatesFilter<"Agent"> | number
    notificateur?: BoolWithAggregatesFilter<"Agent"> | boolean
  }

  export type NotificationWhereInput = {
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    id?: IntFilter<"Notification"> | number
    date?: DateTimeFilter<"Notification"> | Date | string
    contenu?: StringFilter<"Notification"> | string
    notifvu?: NotifvuListRelationFilter
  }

  export type NotificationOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    contenu?: SortOrder
    notifvu?: NotifvuOrderByRelationAggregateInput
  }

  export type NotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    date?: DateTimeFilter<"Notification"> | Date | string
    contenu?: StringFilter<"Notification"> | string
    notifvu?: NotifvuListRelationFilter
  }, "id">

  export type NotificationOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    contenu?: SortOrder
    _count?: NotificationCountOrderByAggregateInput
    _avg?: NotificationAvgOrderByAggregateInput
    _max?: NotificationMaxOrderByAggregateInput
    _min?: NotificationMinOrderByAggregateInput
    _sum?: NotificationSumOrderByAggregateInput
  }

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    OR?: NotificationScalarWhereWithAggregatesInput[]
    NOT?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Notification"> | number
    date?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
    contenu?: StringWithAggregatesFilter<"Notification"> | string
  }

  export type NotifvuWhereInput = {
    AND?: NotifvuWhereInput | NotifvuWhereInput[]
    OR?: NotifvuWhereInput[]
    NOT?: NotifvuWhereInput | NotifvuWhereInput[]
    id?: IntFilter<"Notifvu"> | number
    idAgent?: IntNullableFilter<"Notifvu"> | number | null
    idNotification?: IntNullableFilter<"Notifvu"> | number | null
    notification?: XOR<NotificationNullableScalarRelationFilter, NotificationWhereInput> | null
    agent?: XOR<AgentNullableScalarRelationFilter, AgentWhereInput> | null
  }

  export type NotifvuOrderByWithRelationInput = {
    id?: SortOrder
    idAgent?: SortOrderInput | SortOrder
    idNotification?: SortOrderInput | SortOrder
    notification?: NotificationOrderByWithRelationInput
    agent?: AgentOrderByWithRelationInput
  }

  export type NotifvuWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: NotifvuWhereInput | NotifvuWhereInput[]
    OR?: NotifvuWhereInput[]
    NOT?: NotifvuWhereInput | NotifvuWhereInput[]
    idAgent?: IntNullableFilter<"Notifvu"> | number | null
    idNotification?: IntNullableFilter<"Notifvu"> | number | null
    notification?: XOR<NotificationNullableScalarRelationFilter, NotificationWhereInput> | null
    agent?: XOR<AgentNullableScalarRelationFilter, AgentWhereInput> | null
  }, "id">

  export type NotifvuOrderByWithAggregationInput = {
    id?: SortOrder
    idAgent?: SortOrderInput | SortOrder
    idNotification?: SortOrderInput | SortOrder
    _count?: NotifvuCountOrderByAggregateInput
    _avg?: NotifvuAvgOrderByAggregateInput
    _max?: NotifvuMaxOrderByAggregateInput
    _min?: NotifvuMinOrderByAggregateInput
    _sum?: NotifvuSumOrderByAggregateInput
  }

  export type NotifvuScalarWhereWithAggregatesInput = {
    AND?: NotifvuScalarWhereWithAggregatesInput | NotifvuScalarWhereWithAggregatesInput[]
    OR?: NotifvuScalarWhereWithAggregatesInput[]
    NOT?: NotifvuScalarWhereWithAggregatesInput | NotifvuScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Notifvu"> | number
    idAgent?: IntNullableWithAggregatesFilter<"Notifvu"> | number | null
    idNotification?: IntNullableWithAggregatesFilter<"Notifvu"> | number | null
  }

  export type BanqueWhereInput = {
    AND?: BanqueWhereInput | BanqueWhereInput[]
    OR?: BanqueWhereInput[]
    NOT?: BanqueWhereInput | BanqueWhereInput[]
    id?: IntFilter<"Banque"> | number
    mdp?: StringFilter<"Banque"> | string
    montant?: IntFilter<"Banque"> | number
  }

  export type BanqueOrderByWithRelationInput = {
    id?: SortOrder
    mdp?: SortOrder
    montant?: SortOrder
  }

  export type BanqueWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: BanqueWhereInput | BanqueWhereInput[]
    OR?: BanqueWhereInput[]
    NOT?: BanqueWhereInput | BanqueWhereInput[]
    mdp?: StringFilter<"Banque"> | string
    montant?: IntFilter<"Banque"> | number
  }, "id">

  export type BanqueOrderByWithAggregationInput = {
    id?: SortOrder
    mdp?: SortOrder
    montant?: SortOrder
    _count?: BanqueCountOrderByAggregateInput
    _avg?: BanqueAvgOrderByAggregateInput
    _max?: BanqueMaxOrderByAggregateInput
    _min?: BanqueMinOrderByAggregateInput
    _sum?: BanqueSumOrderByAggregateInput
  }

  export type BanqueScalarWhereWithAggregatesInput = {
    AND?: BanqueScalarWhereWithAggregatesInput | BanqueScalarWhereWithAggregatesInput[]
    OR?: BanqueScalarWhereWithAggregatesInput[]
    NOT?: BanqueScalarWhereWithAggregatesInput | BanqueScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Banque"> | number
    mdp?: StringWithAggregatesFilter<"Banque"> | string
    montant?: IntWithAggregatesFilter<"Banque"> | number
  }

  export type AgentCreateInput = {
    nom: string
    postNom: string
    prenom: string
    tel: string
    mdp: string
    matricule: string
    email: string
    salaire: number
    solde: number
    notificateur?: boolean
    notifvu?: NotifvuCreateNestedManyWithoutAgentInput
  }

  export type AgentUncheckedCreateInput = {
    id?: number
    nom: string
    postNom: string
    prenom: string
    tel: string
    mdp: string
    matricule: string
    email: string
    salaire: number
    solde: number
    notificateur?: boolean
    notifvu?: NotifvuUncheckedCreateNestedManyWithoutAgentInput
  }

  export type AgentUpdateInput = {
    nom?: StringFieldUpdateOperationsInput | string
    postNom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    tel?: StringFieldUpdateOperationsInput | string
    mdp?: StringFieldUpdateOperationsInput | string
    matricule?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    salaire?: IntFieldUpdateOperationsInput | number
    solde?: IntFieldUpdateOperationsInput | number
    notificateur?: BoolFieldUpdateOperationsInput | boolean
    notifvu?: NotifvuUpdateManyWithoutAgentNestedInput
  }

  export type AgentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    postNom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    tel?: StringFieldUpdateOperationsInput | string
    mdp?: StringFieldUpdateOperationsInput | string
    matricule?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    salaire?: IntFieldUpdateOperationsInput | number
    solde?: IntFieldUpdateOperationsInput | number
    notificateur?: BoolFieldUpdateOperationsInput | boolean
    notifvu?: NotifvuUncheckedUpdateManyWithoutAgentNestedInput
  }

  export type AgentCreateManyInput = {
    id?: number
    nom: string
    postNom: string
    prenom: string
    tel: string
    mdp: string
    matricule: string
    email: string
    salaire: number
    solde: number
    notificateur?: boolean
  }

  export type AgentUpdateManyMutationInput = {
    nom?: StringFieldUpdateOperationsInput | string
    postNom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    tel?: StringFieldUpdateOperationsInput | string
    mdp?: StringFieldUpdateOperationsInput | string
    matricule?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    salaire?: IntFieldUpdateOperationsInput | number
    solde?: IntFieldUpdateOperationsInput | number
    notificateur?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AgentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    postNom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    tel?: StringFieldUpdateOperationsInput | string
    mdp?: StringFieldUpdateOperationsInput | string
    matricule?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    salaire?: IntFieldUpdateOperationsInput | number
    solde?: IntFieldUpdateOperationsInput | number
    notificateur?: BoolFieldUpdateOperationsInput | boolean
  }

  export type NotificationCreateInput = {
    date: Date | string
    contenu: string
    notifvu?: NotifvuCreateNestedManyWithoutNotificationInput
  }

  export type NotificationUncheckedCreateInput = {
    id?: number
    date: Date | string
    contenu: string
    notifvu?: NotifvuUncheckedCreateNestedManyWithoutNotificationInput
  }

  export type NotificationUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    contenu?: StringFieldUpdateOperationsInput | string
    notifvu?: NotifvuUpdateManyWithoutNotificationNestedInput
  }

  export type NotificationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    contenu?: StringFieldUpdateOperationsInput | string
    notifvu?: NotifvuUncheckedUpdateManyWithoutNotificationNestedInput
  }

  export type NotificationCreateManyInput = {
    id?: number
    date: Date | string
    contenu: string
  }

  export type NotificationUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    contenu?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    contenu?: StringFieldUpdateOperationsInput | string
  }

  export type NotifvuCreateInput = {
    notification?: NotificationCreateNestedOneWithoutNotifvuInput
    agent?: AgentCreateNestedOneWithoutNotifvuInput
  }

  export type NotifvuUncheckedCreateInput = {
    id?: number
    idAgent?: number | null
    idNotification?: number | null
  }

  export type NotifvuUpdateInput = {
    notification?: NotificationUpdateOneWithoutNotifvuNestedInput
    agent?: AgentUpdateOneWithoutNotifvuNestedInput
  }

  export type NotifvuUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    idAgent?: NullableIntFieldUpdateOperationsInput | number | null
    idNotification?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type NotifvuCreateManyInput = {
    id?: number
    idAgent?: number | null
    idNotification?: number | null
  }

  export type NotifvuUpdateManyMutationInput = {

  }

  export type NotifvuUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    idAgent?: NullableIntFieldUpdateOperationsInput | number | null
    idNotification?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type BanqueCreateInput = {
    mdp: string
    montant: number
  }

  export type BanqueUncheckedCreateInput = {
    id?: number
    mdp: string
    montant: number
  }

  export type BanqueUpdateInput = {
    mdp?: StringFieldUpdateOperationsInput | string
    montant?: IntFieldUpdateOperationsInput | number
  }

  export type BanqueUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    mdp?: StringFieldUpdateOperationsInput | string
    montant?: IntFieldUpdateOperationsInput | number
  }

  export type BanqueCreateManyInput = {
    id?: number
    mdp: string
    montant: number
  }

  export type BanqueUpdateManyMutationInput = {
    mdp?: StringFieldUpdateOperationsInput | string
    montant?: IntFieldUpdateOperationsInput | number
  }

  export type BanqueUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    mdp?: StringFieldUpdateOperationsInput | string
    montant?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NotifvuListRelationFilter = {
    every?: NotifvuWhereInput
    some?: NotifvuWhereInput
    none?: NotifvuWhereInput
  }

  export type NotifvuOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AgentCountOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    postNom?: SortOrder
    prenom?: SortOrder
    tel?: SortOrder
    mdp?: SortOrder
    matricule?: SortOrder
    email?: SortOrder
    salaire?: SortOrder
    solde?: SortOrder
    notificateur?: SortOrder
  }

  export type AgentAvgOrderByAggregateInput = {
    id?: SortOrder
    salaire?: SortOrder
    solde?: SortOrder
  }

  export type AgentMaxOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    postNom?: SortOrder
    prenom?: SortOrder
    tel?: SortOrder
    mdp?: SortOrder
    matricule?: SortOrder
    email?: SortOrder
    salaire?: SortOrder
    solde?: SortOrder
    notificateur?: SortOrder
  }

  export type AgentMinOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    postNom?: SortOrder
    prenom?: SortOrder
    tel?: SortOrder
    mdp?: SortOrder
    matricule?: SortOrder
    email?: SortOrder
    salaire?: SortOrder
    solde?: SortOrder
    notificateur?: SortOrder
  }

  export type AgentSumOrderByAggregateInput = {
    id?: SortOrder
    salaire?: SortOrder
    solde?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NotificationCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    contenu?: SortOrder
  }

  export type NotificationAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type NotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    contenu?: SortOrder
  }

  export type NotificationMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    contenu?: SortOrder
  }

  export type NotificationSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NotificationNullableScalarRelationFilter = {
    is?: NotificationWhereInput | null
    isNot?: NotificationWhereInput | null
  }

  export type AgentNullableScalarRelationFilter = {
    is?: AgentWhereInput | null
    isNot?: AgentWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type NotifvuCountOrderByAggregateInput = {
    id?: SortOrder
    idAgent?: SortOrder
    idNotification?: SortOrder
  }

  export type NotifvuAvgOrderByAggregateInput = {
    id?: SortOrder
    idAgent?: SortOrder
    idNotification?: SortOrder
  }

  export type NotifvuMaxOrderByAggregateInput = {
    id?: SortOrder
    idAgent?: SortOrder
    idNotification?: SortOrder
  }

  export type NotifvuMinOrderByAggregateInput = {
    id?: SortOrder
    idAgent?: SortOrder
    idNotification?: SortOrder
  }

  export type NotifvuSumOrderByAggregateInput = {
    id?: SortOrder
    idAgent?: SortOrder
    idNotification?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type BanqueCountOrderByAggregateInput = {
    id?: SortOrder
    mdp?: SortOrder
    montant?: SortOrder
  }

  export type BanqueAvgOrderByAggregateInput = {
    id?: SortOrder
    montant?: SortOrder
  }

  export type BanqueMaxOrderByAggregateInput = {
    id?: SortOrder
    mdp?: SortOrder
    montant?: SortOrder
  }

  export type BanqueMinOrderByAggregateInput = {
    id?: SortOrder
    mdp?: SortOrder
    montant?: SortOrder
  }

  export type BanqueSumOrderByAggregateInput = {
    id?: SortOrder
    montant?: SortOrder
  }

  export type NotifvuCreateNestedManyWithoutAgentInput = {
    create?: XOR<NotifvuCreateWithoutAgentInput, NotifvuUncheckedCreateWithoutAgentInput> | NotifvuCreateWithoutAgentInput[] | NotifvuUncheckedCreateWithoutAgentInput[]
    connectOrCreate?: NotifvuCreateOrConnectWithoutAgentInput | NotifvuCreateOrConnectWithoutAgentInput[]
    createMany?: NotifvuCreateManyAgentInputEnvelope
    connect?: NotifvuWhereUniqueInput | NotifvuWhereUniqueInput[]
  }

  export type NotifvuUncheckedCreateNestedManyWithoutAgentInput = {
    create?: XOR<NotifvuCreateWithoutAgentInput, NotifvuUncheckedCreateWithoutAgentInput> | NotifvuCreateWithoutAgentInput[] | NotifvuUncheckedCreateWithoutAgentInput[]
    connectOrCreate?: NotifvuCreateOrConnectWithoutAgentInput | NotifvuCreateOrConnectWithoutAgentInput[]
    createMany?: NotifvuCreateManyAgentInputEnvelope
    connect?: NotifvuWhereUniqueInput | NotifvuWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NotifvuUpdateManyWithoutAgentNestedInput = {
    create?: XOR<NotifvuCreateWithoutAgentInput, NotifvuUncheckedCreateWithoutAgentInput> | NotifvuCreateWithoutAgentInput[] | NotifvuUncheckedCreateWithoutAgentInput[]
    connectOrCreate?: NotifvuCreateOrConnectWithoutAgentInput | NotifvuCreateOrConnectWithoutAgentInput[]
    upsert?: NotifvuUpsertWithWhereUniqueWithoutAgentInput | NotifvuUpsertWithWhereUniqueWithoutAgentInput[]
    createMany?: NotifvuCreateManyAgentInputEnvelope
    set?: NotifvuWhereUniqueInput | NotifvuWhereUniqueInput[]
    disconnect?: NotifvuWhereUniqueInput | NotifvuWhereUniqueInput[]
    delete?: NotifvuWhereUniqueInput | NotifvuWhereUniqueInput[]
    connect?: NotifvuWhereUniqueInput | NotifvuWhereUniqueInput[]
    update?: NotifvuUpdateWithWhereUniqueWithoutAgentInput | NotifvuUpdateWithWhereUniqueWithoutAgentInput[]
    updateMany?: NotifvuUpdateManyWithWhereWithoutAgentInput | NotifvuUpdateManyWithWhereWithoutAgentInput[]
    deleteMany?: NotifvuScalarWhereInput | NotifvuScalarWhereInput[]
  }

  export type NotifvuUncheckedUpdateManyWithoutAgentNestedInput = {
    create?: XOR<NotifvuCreateWithoutAgentInput, NotifvuUncheckedCreateWithoutAgentInput> | NotifvuCreateWithoutAgentInput[] | NotifvuUncheckedCreateWithoutAgentInput[]
    connectOrCreate?: NotifvuCreateOrConnectWithoutAgentInput | NotifvuCreateOrConnectWithoutAgentInput[]
    upsert?: NotifvuUpsertWithWhereUniqueWithoutAgentInput | NotifvuUpsertWithWhereUniqueWithoutAgentInput[]
    createMany?: NotifvuCreateManyAgentInputEnvelope
    set?: NotifvuWhereUniqueInput | NotifvuWhereUniqueInput[]
    disconnect?: NotifvuWhereUniqueInput | NotifvuWhereUniqueInput[]
    delete?: NotifvuWhereUniqueInput | NotifvuWhereUniqueInput[]
    connect?: NotifvuWhereUniqueInput | NotifvuWhereUniqueInput[]
    update?: NotifvuUpdateWithWhereUniqueWithoutAgentInput | NotifvuUpdateWithWhereUniqueWithoutAgentInput[]
    updateMany?: NotifvuUpdateManyWithWhereWithoutAgentInput | NotifvuUpdateManyWithWhereWithoutAgentInput[]
    deleteMany?: NotifvuScalarWhereInput | NotifvuScalarWhereInput[]
  }

  export type NotifvuCreateNestedManyWithoutNotificationInput = {
    create?: XOR<NotifvuCreateWithoutNotificationInput, NotifvuUncheckedCreateWithoutNotificationInput> | NotifvuCreateWithoutNotificationInput[] | NotifvuUncheckedCreateWithoutNotificationInput[]
    connectOrCreate?: NotifvuCreateOrConnectWithoutNotificationInput | NotifvuCreateOrConnectWithoutNotificationInput[]
    createMany?: NotifvuCreateManyNotificationInputEnvelope
    connect?: NotifvuWhereUniqueInput | NotifvuWhereUniqueInput[]
  }

  export type NotifvuUncheckedCreateNestedManyWithoutNotificationInput = {
    create?: XOR<NotifvuCreateWithoutNotificationInput, NotifvuUncheckedCreateWithoutNotificationInput> | NotifvuCreateWithoutNotificationInput[] | NotifvuUncheckedCreateWithoutNotificationInput[]
    connectOrCreate?: NotifvuCreateOrConnectWithoutNotificationInput | NotifvuCreateOrConnectWithoutNotificationInput[]
    createMany?: NotifvuCreateManyNotificationInputEnvelope
    connect?: NotifvuWhereUniqueInput | NotifvuWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NotifvuUpdateManyWithoutNotificationNestedInput = {
    create?: XOR<NotifvuCreateWithoutNotificationInput, NotifvuUncheckedCreateWithoutNotificationInput> | NotifvuCreateWithoutNotificationInput[] | NotifvuUncheckedCreateWithoutNotificationInput[]
    connectOrCreate?: NotifvuCreateOrConnectWithoutNotificationInput | NotifvuCreateOrConnectWithoutNotificationInput[]
    upsert?: NotifvuUpsertWithWhereUniqueWithoutNotificationInput | NotifvuUpsertWithWhereUniqueWithoutNotificationInput[]
    createMany?: NotifvuCreateManyNotificationInputEnvelope
    set?: NotifvuWhereUniqueInput | NotifvuWhereUniqueInput[]
    disconnect?: NotifvuWhereUniqueInput | NotifvuWhereUniqueInput[]
    delete?: NotifvuWhereUniqueInput | NotifvuWhereUniqueInput[]
    connect?: NotifvuWhereUniqueInput | NotifvuWhereUniqueInput[]
    update?: NotifvuUpdateWithWhereUniqueWithoutNotificationInput | NotifvuUpdateWithWhereUniqueWithoutNotificationInput[]
    updateMany?: NotifvuUpdateManyWithWhereWithoutNotificationInput | NotifvuUpdateManyWithWhereWithoutNotificationInput[]
    deleteMany?: NotifvuScalarWhereInput | NotifvuScalarWhereInput[]
  }

  export type NotifvuUncheckedUpdateManyWithoutNotificationNestedInput = {
    create?: XOR<NotifvuCreateWithoutNotificationInput, NotifvuUncheckedCreateWithoutNotificationInput> | NotifvuCreateWithoutNotificationInput[] | NotifvuUncheckedCreateWithoutNotificationInput[]
    connectOrCreate?: NotifvuCreateOrConnectWithoutNotificationInput | NotifvuCreateOrConnectWithoutNotificationInput[]
    upsert?: NotifvuUpsertWithWhereUniqueWithoutNotificationInput | NotifvuUpsertWithWhereUniqueWithoutNotificationInput[]
    createMany?: NotifvuCreateManyNotificationInputEnvelope
    set?: NotifvuWhereUniqueInput | NotifvuWhereUniqueInput[]
    disconnect?: NotifvuWhereUniqueInput | NotifvuWhereUniqueInput[]
    delete?: NotifvuWhereUniqueInput | NotifvuWhereUniqueInput[]
    connect?: NotifvuWhereUniqueInput | NotifvuWhereUniqueInput[]
    update?: NotifvuUpdateWithWhereUniqueWithoutNotificationInput | NotifvuUpdateWithWhereUniqueWithoutNotificationInput[]
    updateMany?: NotifvuUpdateManyWithWhereWithoutNotificationInput | NotifvuUpdateManyWithWhereWithoutNotificationInput[]
    deleteMany?: NotifvuScalarWhereInput | NotifvuScalarWhereInput[]
  }

  export type NotificationCreateNestedOneWithoutNotifvuInput = {
    create?: XOR<NotificationCreateWithoutNotifvuInput, NotificationUncheckedCreateWithoutNotifvuInput>
    connectOrCreate?: NotificationCreateOrConnectWithoutNotifvuInput
    connect?: NotificationWhereUniqueInput
  }

  export type AgentCreateNestedOneWithoutNotifvuInput = {
    create?: XOR<AgentCreateWithoutNotifvuInput, AgentUncheckedCreateWithoutNotifvuInput>
    connectOrCreate?: AgentCreateOrConnectWithoutNotifvuInput
    connect?: AgentWhereUniqueInput
  }

  export type NotificationUpdateOneWithoutNotifvuNestedInput = {
    create?: XOR<NotificationCreateWithoutNotifvuInput, NotificationUncheckedCreateWithoutNotifvuInput>
    connectOrCreate?: NotificationCreateOrConnectWithoutNotifvuInput
    upsert?: NotificationUpsertWithoutNotifvuInput
    disconnect?: NotificationWhereInput | boolean
    delete?: NotificationWhereInput | boolean
    connect?: NotificationWhereUniqueInput
    update?: XOR<XOR<NotificationUpdateToOneWithWhereWithoutNotifvuInput, NotificationUpdateWithoutNotifvuInput>, NotificationUncheckedUpdateWithoutNotifvuInput>
  }

  export type AgentUpdateOneWithoutNotifvuNestedInput = {
    create?: XOR<AgentCreateWithoutNotifvuInput, AgentUncheckedCreateWithoutNotifvuInput>
    connectOrCreate?: AgentCreateOrConnectWithoutNotifvuInput
    upsert?: AgentUpsertWithoutNotifvuInput
    disconnect?: AgentWhereInput | boolean
    delete?: AgentWhereInput | boolean
    connect?: AgentWhereUniqueInput
    update?: XOR<XOR<AgentUpdateToOneWithWhereWithoutNotifvuInput, AgentUpdateWithoutNotifvuInput>, AgentUncheckedUpdateWithoutNotifvuInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NotifvuCreateWithoutAgentInput = {
    notification?: NotificationCreateNestedOneWithoutNotifvuInput
  }

  export type NotifvuUncheckedCreateWithoutAgentInput = {
    id?: number
    idNotification?: number | null
  }

  export type NotifvuCreateOrConnectWithoutAgentInput = {
    where: NotifvuWhereUniqueInput
    create: XOR<NotifvuCreateWithoutAgentInput, NotifvuUncheckedCreateWithoutAgentInput>
  }

  export type NotifvuCreateManyAgentInputEnvelope = {
    data: NotifvuCreateManyAgentInput | NotifvuCreateManyAgentInput[]
  }

  export type NotifvuUpsertWithWhereUniqueWithoutAgentInput = {
    where: NotifvuWhereUniqueInput
    update: XOR<NotifvuUpdateWithoutAgentInput, NotifvuUncheckedUpdateWithoutAgentInput>
    create: XOR<NotifvuCreateWithoutAgentInput, NotifvuUncheckedCreateWithoutAgentInput>
  }

  export type NotifvuUpdateWithWhereUniqueWithoutAgentInput = {
    where: NotifvuWhereUniqueInput
    data: XOR<NotifvuUpdateWithoutAgentInput, NotifvuUncheckedUpdateWithoutAgentInput>
  }

  export type NotifvuUpdateManyWithWhereWithoutAgentInput = {
    where: NotifvuScalarWhereInput
    data: XOR<NotifvuUpdateManyMutationInput, NotifvuUncheckedUpdateManyWithoutAgentInput>
  }

  export type NotifvuScalarWhereInput = {
    AND?: NotifvuScalarWhereInput | NotifvuScalarWhereInput[]
    OR?: NotifvuScalarWhereInput[]
    NOT?: NotifvuScalarWhereInput | NotifvuScalarWhereInput[]
    id?: IntFilter<"Notifvu"> | number
    idAgent?: IntNullableFilter<"Notifvu"> | number | null
    idNotification?: IntNullableFilter<"Notifvu"> | number | null
  }

  export type NotifvuCreateWithoutNotificationInput = {
    agent?: AgentCreateNestedOneWithoutNotifvuInput
  }

  export type NotifvuUncheckedCreateWithoutNotificationInput = {
    id?: number
    idAgent?: number | null
  }

  export type NotifvuCreateOrConnectWithoutNotificationInput = {
    where: NotifvuWhereUniqueInput
    create: XOR<NotifvuCreateWithoutNotificationInput, NotifvuUncheckedCreateWithoutNotificationInput>
  }

  export type NotifvuCreateManyNotificationInputEnvelope = {
    data: NotifvuCreateManyNotificationInput | NotifvuCreateManyNotificationInput[]
  }

  export type NotifvuUpsertWithWhereUniqueWithoutNotificationInput = {
    where: NotifvuWhereUniqueInput
    update: XOR<NotifvuUpdateWithoutNotificationInput, NotifvuUncheckedUpdateWithoutNotificationInput>
    create: XOR<NotifvuCreateWithoutNotificationInput, NotifvuUncheckedCreateWithoutNotificationInput>
  }

  export type NotifvuUpdateWithWhereUniqueWithoutNotificationInput = {
    where: NotifvuWhereUniqueInput
    data: XOR<NotifvuUpdateWithoutNotificationInput, NotifvuUncheckedUpdateWithoutNotificationInput>
  }

  export type NotifvuUpdateManyWithWhereWithoutNotificationInput = {
    where: NotifvuScalarWhereInput
    data: XOR<NotifvuUpdateManyMutationInput, NotifvuUncheckedUpdateManyWithoutNotificationInput>
  }

  export type NotificationCreateWithoutNotifvuInput = {
    date: Date | string
    contenu: string
  }

  export type NotificationUncheckedCreateWithoutNotifvuInput = {
    id?: number
    date: Date | string
    contenu: string
  }

  export type NotificationCreateOrConnectWithoutNotifvuInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutNotifvuInput, NotificationUncheckedCreateWithoutNotifvuInput>
  }

  export type AgentCreateWithoutNotifvuInput = {
    nom: string
    postNom: string
    prenom: string
    tel: string
    mdp: string
    matricule: string
    email: string
    salaire: number
    solde: number
    notificateur?: boolean
  }

  export type AgentUncheckedCreateWithoutNotifvuInput = {
    id?: number
    nom: string
    postNom: string
    prenom: string
    tel: string
    mdp: string
    matricule: string
    email: string
    salaire: number
    solde: number
    notificateur?: boolean
  }

  export type AgentCreateOrConnectWithoutNotifvuInput = {
    where: AgentWhereUniqueInput
    create: XOR<AgentCreateWithoutNotifvuInput, AgentUncheckedCreateWithoutNotifvuInput>
  }

  export type NotificationUpsertWithoutNotifvuInput = {
    update: XOR<NotificationUpdateWithoutNotifvuInput, NotificationUncheckedUpdateWithoutNotifvuInput>
    create: XOR<NotificationCreateWithoutNotifvuInput, NotificationUncheckedCreateWithoutNotifvuInput>
    where?: NotificationWhereInput
  }

  export type NotificationUpdateToOneWithWhereWithoutNotifvuInput = {
    where?: NotificationWhereInput
    data: XOR<NotificationUpdateWithoutNotifvuInput, NotificationUncheckedUpdateWithoutNotifvuInput>
  }

  export type NotificationUpdateWithoutNotifvuInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    contenu?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationUncheckedUpdateWithoutNotifvuInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    contenu?: StringFieldUpdateOperationsInput | string
  }

  export type AgentUpsertWithoutNotifvuInput = {
    update: XOR<AgentUpdateWithoutNotifvuInput, AgentUncheckedUpdateWithoutNotifvuInput>
    create: XOR<AgentCreateWithoutNotifvuInput, AgentUncheckedCreateWithoutNotifvuInput>
    where?: AgentWhereInput
  }

  export type AgentUpdateToOneWithWhereWithoutNotifvuInput = {
    where?: AgentWhereInput
    data: XOR<AgentUpdateWithoutNotifvuInput, AgentUncheckedUpdateWithoutNotifvuInput>
  }

  export type AgentUpdateWithoutNotifvuInput = {
    nom?: StringFieldUpdateOperationsInput | string
    postNom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    tel?: StringFieldUpdateOperationsInput | string
    mdp?: StringFieldUpdateOperationsInput | string
    matricule?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    salaire?: IntFieldUpdateOperationsInput | number
    solde?: IntFieldUpdateOperationsInput | number
    notificateur?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AgentUncheckedUpdateWithoutNotifvuInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    postNom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    tel?: StringFieldUpdateOperationsInput | string
    mdp?: StringFieldUpdateOperationsInput | string
    matricule?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    salaire?: IntFieldUpdateOperationsInput | number
    solde?: IntFieldUpdateOperationsInput | number
    notificateur?: BoolFieldUpdateOperationsInput | boolean
  }

  export type NotifvuCreateManyAgentInput = {
    id?: number
    idNotification?: number | null
  }

  export type NotifvuUpdateWithoutAgentInput = {
    notification?: NotificationUpdateOneWithoutNotifvuNestedInput
  }

  export type NotifvuUncheckedUpdateWithoutAgentInput = {
    id?: IntFieldUpdateOperationsInput | number
    idNotification?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type NotifvuUncheckedUpdateManyWithoutAgentInput = {
    id?: IntFieldUpdateOperationsInput | number
    idNotification?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type NotifvuCreateManyNotificationInput = {
    id?: number
    idAgent?: number | null
  }

  export type NotifvuUpdateWithoutNotificationInput = {
    agent?: AgentUpdateOneWithoutNotifvuNestedInput
  }

  export type NotifvuUncheckedUpdateWithoutNotificationInput = {
    id?: IntFieldUpdateOperationsInput | number
    idAgent?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type NotifvuUncheckedUpdateManyWithoutNotificationInput = {
    id?: IntFieldUpdateOperationsInput | number
    idAgent?: NullableIntFieldUpdateOperationsInput | number | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}